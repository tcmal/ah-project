import numpy as np

BLOCK_SIZE = 16
KEY_SIZE = 32

SBOX = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]

SBOX_REVERSE = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ]


def addRoundKey(block, round_key):
    # For each value in the block
    with np.nditer(block, flags=['multi_index'], op_flags=['readwrite']) as it:
        # This isn't a normal for loop so we can get the index of the element as a tuple
        while not it.finished:
            idx = it.multi_index # (0, 0), (2, 3), etc up to (3, 3)
            x = it[0]

            # XOR with the corresponding value from the key
            it[0] = round_key[idx] ^ it[0]

            it.iternext()
    return block

def rotate_circular_right(arr, n):
    # Repeat n times:
    for _ in range(n):
        # Temp = last value of array
        temp = arr[-1]
        
        # Move the rest of the array up one element
        for i in range(len(arr) - 1, 0, -1):
            arr[i] = arr[i-1]

        # Set the first element to temp
        arr[0] = temp
    return arr

def rotate_circular_left(arr, n):
    # Repeat n times:
    for _ in range(n):
        # Temp = first value of array
        temp = arr[0]
        
        # Move the rest of the array down one element
        for i in range(1, len(arr)):
            arr[i-1] = arr[i]

        # Set the last element to temp
        arr[-1] = temp
    return arr

def sbox(block, inverse=False):
    with np.nditer(block, op_flags=['readwrite']) as it:
        # When we're encrypting,
        if not inverse:
            # For each value in block
            for x in it:
                # Replace it with SBOX[x]
                x[...] = SBOX[x]
        # When we're decrypting
        else:
            # For each value in block
            for x in it:
                # Replace it with sbox_reverse[x]
                x[...] = SBOX_REVERSE[x]
    return block


def shiftRows(block, inverse=False):
    # When we're encrypting,
    if not inverse:
        # For each row
        for row in range(4):
            # Rotate that component left the same amount of times as its index
            block[row] = rotate_circular_left(block[row], row)
    else:
        # For each row
        for row in range(4):
            # Rotate that component right the same amount of times as its index
            block[row] = rotate_circular_right(block[row], row)

    return block

def mixColumns(block, inverse=False):
    # For each column,
    for col in range(4):
        # Mix that column
        block[:,col] = mixColumn(block[:,col], inverse)

    return block

def mixColumn(orig, inverse):
    # Get the right multiplicative matrix
    mult = None
    if inverse:
        mult = [
            [14, 11, 13, 9],
            [9, 14, 11, 13],
            [13, 9, 14, 11],
            [11, 13, 9, 14]
        ]
    else:
        mult = [
            [2, 3, 1, 1],
            [1, 2, 3, 1],
            [1, 1, 2, 3],
            [3, 1, 1, 2]
        ]

    # Make space for output
    col = np.zeros(shape=(4,), dtype='int')

    # (4x1) * (4x4) matrix multiplication in a finite field, but with galois multiplication & addition
    # For each row in our column
    for i in range(0,4):
        # Set accumulator to 0
        accumulator = 0

        # For each row in orig column
        for j in range(0,4):
            # XOR accumulator with this row (index j) times the column index j of the row in the multiplication matrix (i) our output comes from
            accumulator ^= galois_multiplication(orig[j], mult[i][j])

        # Set this row to accumulator
        col[i] = accumulator

    return col

def get_blocks(data):
    # Initialise an empty array blocks
    blocks = []

    # Calculate number of blocks
    num_blocks = len(data) // BLOCK_SIZE
    if len(data) % BLOCK_SIZE != 0:
        num_blocks += 1

    # For i -> number of blocks
    for i in range(0, num_blocks):
        # Get the range of data for that block
        start = i * BLOCK_SIZE
        end = start + BLOCK_SIZE # exclusive
        block = []

        # If there's not enough data, pad it with 0s
        if end > len(data):
            block = data[start:]
            while len(block) < BLOCK_SIZE:
                block.append(0)
        else:
            block = data[start:end]

        # Interpret it as a 2D array
        matrix = np.ndarray(shape=(4,4), order='F', dtype='int')
        for row in range(4): # TODO
            for col in range(4):
                matrix[row][col] = block[(col*4) + row]

        # Add that block to the list of blocks
        blocks.append(matrix)

    return blocks

def galois_multiplication(a, b):
    # Start with product = 0    
    product = 0
    # Repeat 8 times
    for counter in range(8):
        # If a or b is 0, Exit early
        if a == 0 or b == 0:
            break

        # If B is odd, XOR product with a
        if b & 1:
            product ^= a

        # Keep track of if we need to carry a number
        carry = a & 0x80

        # Left shift a 1 (Equivalent to * x)
        a <<= 1
        a &= 0xFF # Make sure a is always 8 bits.

        # If we need to carry:
        if carry:
            # XOR a with 0x1b
            a ^= 0b00011011 # Irreducible polynomial w/o the highest term

        # Right shift b 1 (Equivalent to / x)
        b >>= 1
        
    return product